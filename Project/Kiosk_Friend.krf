(in-microtheory Interaction-Manager-KioskMt)

;;; (achieve :receiver interaction-manager :content (playWithKioskFriend))
;;; (achieve :receiver interaction-manager :content (endKioskFriend))

;;; start the game...
(isa playWithKioskFriend ComplexActionPredicate)
(arity playWithKioskFriend 0)
(comment playWithKioskFriend
  "(playWithKioskFriend) tweaks the Interaction Manager KioskMt to use semantic 
   interpretation methods that implement the kiosk friend program.")

(isa kioskFriendActive Predicate)
(arity kioskFriendActive 0)

;;; start
(preconditionForMethod 
 (and (newReifiedUtterance ?system-utterance)
      (currentUser ?user)
      (formattedContentString
       "Hi ~a, how can I help you today?" (TheList ?user) ?utterance-string))
 (methodForAction
  (playWithKioskFriend)
  (actionSequence
   (TheList 
    (doRecordMembers
     (TheSet
      (ist-Information Interaction-Manager-KioskMt
        (<== (preferInContext (answerQuestionViaEEs ?dcase) ?seq1 ?seq2)
             (containsPattern (doEADiscourseInterpretation ?mt ?s-id ?n-id) ?seq1)))
      (ist-Information Interaction-Manager-KioskMt
        (<== (preferInContext (answerQuestionViaEEs ?dcase) ?seq1 ?seq2)
             ;(someArgumentHasPredicate ?seq1 endKioskFriend)
             (someArgumentHasPredicate ?seq1 kioskFriendActive)))
      (kioskFriendActive)))
    (doSayUtterance ?system-utterance ?utterance-string)))))

(isa endKioskFriend ComplexActionPredicate)
(arity endKioskFriend 0)

(preconditionForMethod
 (true)
 (methodForAction
  (endKioskFriend)
  (actionSequence
   (TheList
    (doForgetMembers
     (TheSet
      (ist-Information Interaction-Manager-KioskMt
        (<== (preferInContext (answerQuestionViaEEs ?dcase) ?seq1 ?seq2)
             (containsPattern (doEADiscourseInterpretation ?mt ?s-id ?n-id) ?seq1)))
      (ist-Information Interaction-Manager-KioskMt
        (<== (preferInContext (answerQuestionViaEEs ?dcase) ?seq1 ?seq2)
             ;(someArgumentHasPredicate ?seq1 endKioskFriend)))
             (someArgumentHasPredicate ?seq1 kioskFriendActive)))
      (kioskFriendActive)))))))

;;; only guide the declarative sentence to here and use NF.
(preconditionForMethod
 (and (newReifiedUtterance ?system-utterance)
      (currentAgents ?agents)
      (not (elementOf psi ?agents))
      (outsourcedOnly (currentSentenceId ?sid))
      (ist-Information ?dcase
        (sentenceText ?sid ?user-utterance))
      (different ?user-utterance "Yes." "No.")
      (generateMostAppropriateQuery ?dcase ?response)
      (ist-Information ?dcase
        (sentenceInDiscourse ?sid ?s-index ?wordslist))
      (evaluate ?next-index (PlusFn 1 ?s-index)))
 (methodForAction 
  (answerQuestionViaEEs ?dcase)
  (actionSequence
   (TheList 
    ;(doSayUtterance ?system-utterance ?p-text)
    (judgeToSayKioskAnswer ?sid ?dcase)
    (doAnnounce "current ?sid: ~a~%" (?sid))
    (doEADiscourseInterpretation
     InterstellarTrader-NFMt ?s-index ?next-index)
    (doAgentPlan
     (gatherResearchInterests ?sid ?dcase))))))

(isa judgeToSayKioskAnswer ComplexActionPredicate)
(arity judgeToSayKioskAnswer 2)

(preconditionForMethod
 (and 
      (newReifiedUtterance ?system-utterance)
      (mostSpecificUtteranceType ?sid ?sentence-type)
      (elementOf ?sentence-type (TheSet WhatQuestion-IBT WhenQuestion-IBT WhereQuestion-IBT 
                                        WhichQuestion-IBT WhoQuestion-IBT WhyQuestion-IBT
                                        YesOrNoQuestion-IBT))
      ;(uninferredSentence (mostSpecificUtteranceType ?sid DeclarativeUtterance))
      (generateMostAppropriateQuery ?dcase ?response)
      (subexpressionMatching (psikiSayText ?p-text) ?response ?st))
 (methodForAction
  (judgeToSayKioskAnswer ?sid ?dcase)
  (actionSequence
   (TheList
    (doSayUtterance ?system-utterance ?p-text)))))

(preconditionForMethod
 (and 
      (newReifiedUtterance ?system-utterance)
      (mostSpecificUtteranceType ?sid ?sentence-type)
      (uninferredSentence
       (elementOf ?sentence-type (TheSet WhatQuestion-IBT WhenQuestion-IBT WhereQuestion-IBT 
                                        WhichQuestion-IBT WhoQuestion-IBT WhyQuestion-IBT
                                         YesOrNoQuestion-IBT))))
 (methodForAction
  (judgeToSayKioskAnswer ?sid ?dcase)
  (actionSequence
   (TheList
    ))))

(isa gatherResearchInterests ComplexActionPredicate)
(arity gatherResearchInterests 2)

(preconditionForMethod
 (and (newReifiedUtterance ?system-utterance)
      (currentUser ?user)
      (outsourcedOnly (currentSentenceId ?sentence-id))
      ;;; suggestions are grabbed from horn clauses.
      (ist-Information ?dcase
        (asksForFacultyLocation ?sentence-id ?faculty ?group-name ?suggestion))
      (formattedContentString
       "~a, Are you maybe interested in ~a?" (TheList ?user ?suggestion) ?utterance-string))
 (methodForAction
  (gatherResearchInterests ?sid ?dcase)
  (actionSequence
   (TheList
    (doSayUtterance ?system-utterance ?utterance-string)))))
    ;(doRecord 
      ;(ist-Information (UserContextFn ?user) (preferResearchArea ?group-name)))))))

(preconditionForMethod
 (and (newReifiedUtterance ?system-utterance)
      (currentUser ?user)
      (outsourcedOnly (currentSentenceId ?sentence-id))
      (uninferredSentence (ist-Information (UserContextFn ?user) (majorInSchool ?user ?major)))
      (uninferredSentence (ist-Information (UserContextFn ?user) (yearOfGrade ?user ?grade)))
      ;;; suggestions are grabbed from horn clauses.
      (ist-Information ?dcase
        (detectingUserRequest ?sentence-id ?request))
      (formattedContentString
       "~a, can you tell me your major and what year are you?" (TheList ?user) ?utterance-string))
 (methodForAction
  (gatherResearchInterests ?sid ?dcase)
  (actionSequence
   (TheList
    (doSayUtterance ?system-utterance ?utterance-string)))))

(preconditionForMethod
 (and (newReifiedUtterance ?system-utterance)
      (currentUser ?user)
      (outsourcedOnly (currentSentenceId ?sentence-id))
      (ist-Information (UserContextFn ?user) (majorInSchool ?user ?major))
      (ist-Information (UserContextFn ?user) (yearOfGrade ?user ?grade))
      ;;; suggestions are grabbed from horn clauses.
      (ist-Information ?dcase
        (detectingUserRequest ?sentence-id ?request)))
 (methodForAction
  (gatherResearchInterests ?sid ?dcase)
  (actionSequence
   (TheList
    (doAgentPlan (recommendToUser))))))


(isa UserContextFn UnaryFunction)
(arity UserContextFn 1)
(arg1Isa UserContextFn HumanCyclist)
(resultIsa UserContextFn Microtheory)

(preconditionForMethod
 (and (newReifiedUtterance ?system-utterance)
      (currentUser ?user)
      (outsourcedOnly (currentSentenceId ?sentence-id))
      (uninferredSentence
       (ist-Information ?dcase
         (detectingUserRequest ?prev-sentence-id ?request)))
      (ist-Information ?dcase
        (getUserInfo ?sentence-id ?user-info))
      (unifies (userInfoWGrade ?major ?grade) ?user-info)
      (formattedContentString
       "Ok, store ur info: major: ~a, grade: ~a, anything else I can help?" 
       (TheList ?major ?grade) ?utterance-string))
 (methodForAction
  (gatherResearchInterests ?sid ?dcase)
  (actionSequence
   (TheList
    (doRecord
     (isa (UserContextFn ?user) Microtheory))
    (doRecordMembers
     (TheSet
      (ist-Information (UserContextFn ?user) (majorInSchool ?user (MajorFn ?major)))
      (ist-Information (UserContextFn ?user) (yearOfGrade ?user ?grade))))
    (doSayUtterance ?system-utterance ?utterance-string)))))

;;; Triggered by recommendation part: "I want to find a research group."
(preconditionForMethod
 (and (newReifiedUtterance ?system-utterance)
      (currentUser ?user)
      (outsourcedOnly (currentSentenceId ?sentence-id))
      (ist-Information ?dcase
         (detectingUserRequest ?prev-sentence-id ?request))
      (ist-Information ?dcase
        (getUserInfo ?sentence-id ?user-info))
      (unifies (userInfoWGrade ?major ?grade) ?user-info))
      ;(recommendUser ?user ?result-recommendation)
      ;(formattedContentString
      ; "Ok, store ur info. And based on previous data, I would recommend ~a. Anything else I can help?" 
      ; (TheList ?result-recommendation) ?utterance-string))
 (methodForAction
  (gatherResearchInterests ?sid ?dcase)
  (actionSequence
   (TheList
    (doRecord
     (isa (UserContextFn ?user) Microtheory))
    (doRecordMembers
     (TheSet
      (ist-Information (UserContextFn ?user) (majorInSchool ?user (MajorFn ?major)))
      (ist-Information (UserContextFn ?user) (yearOfGrade ?user ?grade))))
    (doAgentPlan (recommendToUser))))))

(isa recommendToUser ComplexActionPredicate)
(arity recommendToUser 0)

(preconditionForMethod
 (and (newReifiedUtterance ?system-utterance)
      (currentUser ?user)
      (uninferredSentence (ist-Information (UserContextFn ?user) (dislikeSkill ?user ?skill)))
      (uninferredSentence (ist-Information (UserContextFn ?user) (hasSkill ?user ?skill)))
      (recommendUser ?user ?result-recommendation)
      (extractResearchAreaResult ?user ?result-recommendation ?research-area)
      (formattedContentString
       "Ok, store ur info. And based on previous students' data, I would recommend these ~a group. 
       You can provide more information so that I can better assist you. Anything else I can help?" 
       (TheList ?research-area) ?utterance-string))
 (methodForAction
  (recommendToUser)
  (actionSequence
   (TheList
    ;;; if user doesn't provide detailed information, we might simply return a set of possible group
    ;;; and do not record it...
    ;(doRecord 
    ; (ist-Information (UserContextFn ?user) (preferResearchArea ?user ?research-area)))
    (doSayUtterance ?system-utterance ?utterance-string)))))

(preconditionForMethod
 (and (newReifiedUtterance ?system-utterance)
      (currentUser ?user)
      ;(ist-Information (UserContextFn ?user) (dislikeSkill ?user ?skill))
      (ist-Information (UserContextFn ?user) (hasSkill ?user ?skill))
      (recommendedGroup ?group ?user)
      (formattedContentString
       "Ok, recommend ~a group based on your preference. Anything else I can help?" 
       (TheList ?group) ?utterance-string))
 (methodForAction
  (recommendToUser)
  (actionSequence
   (TheList
    (doRecord 
     (ist-Information (UserContextFn ?user) (preferResearchArea ?user ?group)))
    (doSayUtterance ?system-utterance ?utterance-string)))))

(preconditionForMethod
 (and (kioskFriendActive)
      (outsourcedOnly (currentSentenceId ?sid))
      (ist-Information ?dcase
        (sentenceText ?sid ?string))
      (equals ?string "No.")
      (newReifiedUtterance ?system-utterance)
      (formattedContentString
       "Alright, see you." (TheList) ?utterance-string))
 (methodForAction
  (answerQuestionViaEEs ?dcase)
  (actionSequence
   (TheList
    ;;; TODO: stupid way to flag...
    (doRecord (kioskFriendActive))
    (doAgentPlan (endKioskFriend))
    (doSayUtterance ?system-utterance ?utterance-string)))))

(preconditionForMethod
 (and (kioskFriendActive)
      (outsourcedOnly (currentSentenceId ?sid))
      (ist-Information ?dcase
        (sentenceText ?sid ?string))
      (equals ?string "Yes.")
      (currentUser ?user)
      (ist-Information ?dcase
        (sentenceInDiscourse ?sid ?s-index ?wordslist))
      (evaluate ?prev-index (DifferenceFn ?s-index 1))
      (ist-Information ?dcase
        (sentenceInDiscourse ?prev-sid ?prev-index ?prev-wordslist))
      (ist-Information ?dcase
        (asksForFacultyLocation ?prev-sid ?faculty ?group-name ?suggestion))
      (formattedContentString
       "Can you please tell me your grade and major? Thanks." (TheList) ?utterance-string))
 (methodForAction
  (answerQuestionViaEEs ?dcase)
  (actionSequence
   (TheList
    ;(doAgentPlan (endKioskFriend))
    (doRecord 
     (ist-Information (UserContextFn ?user) (preferResearchArea ?user ?group-name)))
    (doRecord (kioskFriendActive))
    (doSayUtterance ?system-utterance ?utterance-string)))))

;;; added 06/09/2020, to capture user skill preference
(preconditionForMethod
 (and (newReifiedUtterance ?system-utterance)
      (currentUser ?user)
      (outsourcedOnly (currentSentenceId ?sentence-id))
      (ist-Information ?dcase
        (recordUserPreference ?sentence-id ?skill ?likeordislike))
      (formattedContentString
       "Okay, stored your preference. Anything else I can help?" (TheList) ?utterance-string))
 (methodForAction
  (gatherResearchInterests ?sid ?dcase)
  (actionSequence
   (TheList
    (doRecord
     (ist-Information (UserContextFn ?user) (?likeordislike ?user ?skill)))
    (doSayUtterance ?system-utterance ?utterance-string)))))
      
    
